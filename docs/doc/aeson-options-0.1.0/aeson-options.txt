-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Options to derive FromJSON/ToJSON instances
--   
--   Options to derive FromJSON/ToJSON instances.
@package aeson-options
@version 0.1.0


-- | Options used to derive FromJSON/ToJSON instance. These options
--   generally comply to our style regarding names. Of course sometimes
--   they don't fit one's needs, so treat them as just sensible defaults.
module Data.Aeson.Options

-- | These options do the following transformations: 1. Names of field
--   records are assumed to be camelCased, <tt>camel</tt> part is removed,
--   <tt>Cased</tt> part is converted to <tt>cased</tt>. So
--   <tt>camelCased</tt> becomes <tt>cased</tt>. Also all punctuation
--   symbols are dropped before doing it. 2. Constructors are assumed to
--   start with some capitalized prefix (which finished right before the
--   last capital letter). This prefix is dropped and then the first letter
--   is lowercased.
defaultOptions :: Options

-- | These options are the same as <a>defaultOptions</a>, but they don't
--   modify constructor tags.
leaveTagOptions :: Options

-- | Options used for communication with PureScript by default.
defaultOptionsPS :: Options

-- | Options to strip type name from the field names. See
--   <a>genericParseJSONStripType</a> and <a>genericToJSONStripType</a> for
--   examples.
stripTypeOptions :: forall a. Typeable a => Options

-- | Allows to create <a>FromJSON</a> instance that strips the data type
--   name prefix from every field. Doesn't change name of the fields that
--   doesn't start with the type name.
--   
--   <pre>
--   &gt;&gt;&gt; data Foo = Foo { fooBar :: String, fooQuux :: Int } deriving (Generic, Show)
--   
--   &gt;&gt;&gt; instance FromJSON Foo where parseJSON = genericParseJSONStripType
--   
--   &gt;&gt;&gt; decode @Foo "{ \"bar\": \"test\", \"quux\": 42 }"
--   Just (Foo {fooBar = "test", fooQuux = 42})
--   </pre>
genericParseJSONStripType :: forall a. (Typeable a, Generic a, GFromJSON Zero (Rep a)) => Value -> Parser a

-- | Allows to create <a>ToJSON</a> instance that strips the data type name
--   prefix from every field. Doesn't change name of the fields that
--   doesn't start with the type name.
--   
--   <pre>
--   &gt;&gt;&gt; data Foo = Foo { fooBar :: String, fooQuux :: Int } deriving (Generic, Show)
--   
--   &gt;&gt;&gt; instance ToJSON Foo where toJSON = genericToJSONStripType
--   
--   &gt;&gt;&gt; encode $ Foo { fooBar = "test", fooQuux = 42 }
--   "{\"quux\":42,\"bar\":\"test\"}"
--   </pre>
genericToJSONStripType :: forall a. (Typeable a, Generic a, GToJSON Zero (Rep a)) => a -> Value
