-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/tqtezos/prototype-forwarder-contract#readme</a>
@package prototype-forwarder-contract
@version 1.0.0.0

module Lorentz.Contracts.Forwarder

-- | We need the addresses of: - The sub-token contract, assumed to accept
--   <a>Parameter</a> - The Tezos Wallet to process refunds (assuming this
--   contract is authorized to call it) - The central wallet to transfer
--   sub-tokens to
data Storage
Storage :: ContractRef Parameter -> ContractRef RefundParameters -> Address -> Storage
[subTokenContract] :: Storage -> ContractRef Parameter
[tezosWallet] :: Storage -> ContractRef RefundParameters
[centralWallet] :: Storage -> Address

-- | What's required to refund mutez from the Tezos Wallet
type RefundParameters = ("amount" :! Mutez, "to" :! Address)

-- | The number of sub-tokens to transfer
type Parameter = Natural

-- | <tt>coerce_</tt> to <a>TransferParams</a>
toTransferParams :: (Address & (Address & (Natural & s))) :-> (TransferParams & s)

-- | Run <a>TransferParams</a> with a <tt><a>ContractRef</a>
--   <a>Parameter</a></tt>, from <a>Address</a>, to <a>Address</a>, and
--   number of sub-tokens
runTransferParams :: (ContractRef Parameter & (Address & (Address & (Natural & s)))) :-> (Operation & s)

-- | Run <a>TransferParams</a> on the given <a>Parameter</a> and
--   <a>Storage</a>, where from is <a>sender</a> and to is
--   <a>centralWallet</a>
runStorageTransferParams :: (Parameter & (Storage & s)) :-> (Operation & (Storage & s))

-- | Derive <a>RefundParameters</a> and transfer arguments from the number
--   of <a>Mutez</a> to refund and <a>Storage</a>
toRefundParameters :: (Mutez & (Storage & s)) :-> (RefundParameters & (Mutez & (ContractRef RefundParameters & (Storage & s))))

-- | Process a refund, given the refund amount in <a>Mutez</a> and
--   <a>Storage</a>
processRefund :: (Mutez & (Storage & s)) :-> (Operation & (Storage & s))

-- | Given a method to calculate the number of <a>Mutez</a> to refund from
--   the number of sub-tokens transferred, produce a forwarder contract.
forwarderContract :: (forall s. (Natural & s) :-> (Mutez & s)) -> ContractCode Parameter Storage
instance Michelson.Typed.Haskell.Value.IsoValue Lorentz.Contracts.Forwarder.Storage
instance GHC.Generics.Generic Lorentz.Contracts.Forwarder.Storage
instance GHC.Show.Show Lorentz.Contracts.Forwarder.Storage
instance GHC.Classes.Eq Lorentz.Contracts.Forwarder.Storage
instance GHC.Show.Show Lorentz.Contracts.Spec.ManagedLedgerInterface.Parameter

module Lorentz.Contracts.Product

-- | Parameter for either given <tt>Contract</tt>
data (:|:) cp1 cp2
LeftParameter :: !cp1 -> (:|:) cp1 cp2
RightParameter :: !cp2 -> (:|:) cp1 cp2

-- | Parameter for both given <tt>Contract</tt>s
data (:&:) st1 st2
(:&:) :: !st1 -> !st2 -> (:&:) st1 st2
[leftStorage] :: (:&:) st1 st2 -> !st1
[rightStorage] :: (:&:) st1 st2 -> !st2

-- | <a>forcedCoerce_</a> from `(:&amp;:)`
unStorage :: ((st1 :&: st2) & s) :-> ((st1, st2) & s)

-- | <a>forcedCoerce_</a> to `(:&amp;:)`
toStorage :: ((st1, st2) & s) :-> ((st1 :&: st2) & s)

-- | The (independent) product of two contracts: accepting parameters from
--   either (<a>:|:</a>) and holding storage for both (<a>:&amp;:</a>)
productContract :: forall cp1 st1 cp2 st2. (IsoValue cp1, IsoValue cp2) => ContractCode cp1 st1 -> ContractCode cp2 st2 -> ContractCode (cp1 :|: cp2) (st1 :&: st2)
instance GHC.Generics.Generic (st1 Lorentz.Contracts.Product.:&: st2)
instance GHC.Generics.Generic (cp1 Lorentz.Contracts.Product.:|: cp2)
instance (GHC.Read.Read cp1, GHC.Read.Read cp2) => GHC.Read.Read (cp1 Lorentz.Contracts.Product.:|: cp2)
instance (GHC.Show.Show cp1, GHC.Show.Show cp2) => GHC.Show.Show (cp1 Lorentz.Contracts.Product.:|: cp2)
instance (Michelson.Typed.Haskell.Value.IsoValue cp1, Michelson.Typed.Haskell.Value.IsoValue cp2) => Michelson.Typed.Haskell.Value.IsoValue (cp1 Lorentz.Contracts.Product.:|: cp2)
instance (GHC.Read.Read cp1, GHC.Read.Read cp2) => GHC.Read.Read (cp1 Lorentz.Contracts.Product.:&: cp2)
instance (GHC.Show.Show cp1, GHC.Show.Show cp2) => GHC.Show.Show (cp1 Lorentz.Contracts.Product.:&: cp2)
instance (Michelson.Typed.Haskell.Value.IsoValue cp1, Michelson.Typed.Haskell.Value.IsoValue cp2) => Michelson.Typed.Haskell.Value.IsoValue (cp1 Lorentz.Contracts.Product.:&: cp2)
instance (Lorentz.TypeAnns.HasTypeAnn cp1, Lorentz.TypeAnns.HasTypeAnn cp2) => Lorentz.TypeAnns.HasTypeAnn (cp1 Lorentz.Contracts.Product.:|: cp2)
instance (Lorentz.Constraints.Scopes.NiceParameter cp1, Lorentz.Constraints.Scopes.NiceParameter cp2, Michelson.Typed.Scope.HasNoOp (Michelson.Typed.Haskell.Value.ToT cp1), Michelson.Typed.Scope.HasNoOp (Michelson.Typed.Haskell.Value.ToT cp2), Michelson.Typed.Scope.HasNoNestedBigMaps (Michelson.Typed.Haskell.Value.ToT cp1), Michelson.Typed.Scope.HasNoNestedBigMaps (Michelson.Typed.Haskell.Value.ToT cp2), Lorentz.TypeAnns.HasTypeAnn cp1, Lorentz.TypeAnns.HasTypeAnn cp2) => Lorentz.EntryPoints.Core.ParameterHasEntryPoints (cp1 Lorentz.Contracts.Product.:|: cp2)

module Lorentz.Contracts.View

-- | A <a>View</a> accepting `()` as its argument
type View_ = View ()

-- | Construct a <a>View_</a>
toView_ :: ToContractRef r a => a -> View_ r

-- | <a>view_</a> specialized to <a>View_</a>
viewUnit_ :: NiceParameter r => (forall (s0 :: [*]). (storage & s0) :-> (r : s0)) -> (View_ r & (storage & s)) :-> ((List Operation, storage) & s)
instance GHC.Read.Read (Lorentz.Address.TAddress r)
instance (GHC.Read.Read a, Lorentz.Constraints.Scopes.NiceParameter r, Lorentz.Address.ToContractRef r (Lorentz.Address.TAddress r)) => GHC.Read.Read (Lorentz.Macro.View a r)

module Lorentz.Contracts.Expiring

-- | Either a <a>WrappedParameter</a>, which will fail if the contract has
--   expired, or <a>GetExpiration</a> (will never fail).
data Parameter cp
WrappedParameter :: !cp -> Parameter cp
GetExpiration :: View_ Timestamp -> Parameter cp

-- | We store the wrapped <tt>Contract</tt>'s storage and the expiration
--   <a>Timestamp</a>
data Storage st
Storage :: !st -> !Timestamp -> Storage st
[wrappedStorage] :: Storage st -> !st
[expirationTime] :: Storage st -> !Timestamp

-- | <a>forcedCoerce_</a> from <a>Storage</a>
unStorage :: (Storage st & s) :-> ((st, Timestamp) & s)

-- | <a>forcedCoerce_</a> to <a>Storage</a>
toStorage :: ((st, Timestamp) & s) :-> (Storage st & s)

-- | If the <a>Timestamp</a> is not before <a>now</a>, throws
--   <tt>"expired"</tt>.
--   
--   Caveat: <a>now</a> does not return the current time, it returns the
--   timestamp of the last baked block. This means that <a>now</a> can be
--   up to <tt>time_between_blocks</tt> behind realtime.
--   
--   Currently, <tt>time_between_blocks</tt> is <tt>60 seconds</tt> on
--   mainnet or <tt>30</tt> seconds on testnet.
assertNotExpired :: (Timestamp & s) :-> (Timestamp & s)

-- | Adds non-changeable expiration to a contract:
--   
--   <a>Storage</a> contains an expiration <a>Timestamp</a> that can be
--   queried using <a>GetExpiration</a>.
--   
--   Once the <a>Timestamp</a> is past, the contract is locked
--   
--   Caveat: Up to error due to <a>now</a>, see <a>assertNotExpired</a> for
--   more info
expiringContract :: forall cp st. IsoValue cp => ContractCode cp st -> ContractCode (Parameter cp) (Storage st)
instance GHC.Generics.Generic (Lorentz.Contracts.Expiring.Storage st)
instance GHC.Generics.Generic (Lorentz.Contracts.Expiring.Parameter cp)
instance GHC.Read.Read cp => GHC.Read.Read (Lorentz.Contracts.Expiring.Parameter cp)
instance GHC.Show.Show cp => GHC.Show.Show (Lorentz.Contracts.Expiring.Parameter cp)
instance Michelson.Typed.Haskell.Value.IsoValue cp => Michelson.Typed.Haskell.Value.IsoValue (Lorentz.Contracts.Expiring.Parameter cp)
instance GHC.Show.Show st => GHC.Show.Show (Lorentz.Contracts.Expiring.Storage st)
instance Michelson.Typed.Haskell.Value.IsoValue st => Michelson.Typed.Haskell.Value.IsoValue (Lorentz.Contracts.Expiring.Storage st)
instance Lorentz.TypeAnns.HasTypeAnn cp => Lorentz.TypeAnns.HasTypeAnn (Lorentz.Contracts.Expiring.Parameter cp)
instance (Lorentz.TypeAnns.HasTypeAnn cp, Lorentz.Constraints.Scopes.NiceParameter cp) => Lorentz.EntryPoints.Core.ParameterHasEntryPoints (Lorentz.Contracts.Expiring.Parameter cp)

module Michelson.Typed.Value.Orphans
instance Michelson.Typed.Haskell.Value.IsoValue (Michelson.Typed.Value.Value' Michelson.Typed.Instr.Instr a)
instance Data.Singletons.Internal.SingI t => Lorentz.TypeAnns.HasTypeAnn (Michelson.Typed.Aliases.Value t)

module Lorentz.Contracts.Forwarder.Specialized

-- | The number of sub-tokens to forward
type Parameter = Natural

-- | We have the addresses of: - The sub-token contract, assumed to accept
--   <a>Parameter</a> - The central wallet to transfer sub-tokens to
type Storage = ()

-- | Wrap a <tt>to</tt> <a>Address</a> and number of tokens to transfer in
--   <a>TransferParams</a>, sending from <a>self</a>
toTransferParameter :: forall s. (Address & (Natural & s)) :-> (TransferParams & s)

-- | Run a transfer to the given central wallet <a>Address</a>, given the
--   token contract <a>Address</a> and the number of tokens to transfer
runSpecializedTransfer :: Address -> Address -> (Natural & s) :-> (Operation & s)

-- | Forwarder contract: forwards the given number of sub-tokens from its
--   own address to the central wallet.
specializedForwarderContract :: Address -> Address -> ContractCode Parameter Storage

-- | <a>analyzeLorentz</a> specialized to the
--   <a>specializedForwarderContract</a>
analyzeSpecializedForwarder :: Address -> Address -> AnalyzerRes

-- | <a>forcedCoerce_</a> to convert parameter and storage types to their
--   <a>Value</a> equivalents
contractOverValue :: forall cp st. ContractCode cp st -> ContractCode (Value (ToT cp)) (Value (ToT st))

-- | Verify that <a>SomeContract</a> is an instance of
--   <a>specializedForwarderContract</a>, for some particular central
--   wallet address and token address.
verifyForwarderContract :: Address -> Address -> SomeContract -> Either String ()

module Lorentz.Contracts.Forwarder.Specialized.FlushAny

-- | The number of sub-tokens to forward and the typed contract address of
--   the token to forward it on
data Parameter
Parameter :: !Natural -> !ContractRef TransferParams -> Parameter
[amountToFlush] :: Parameter -> !Natural
[tokenContract] :: Parameter -> !ContractRef TransferParams

-- | Unwrap a <a>Parameter</a>
unParameter :: (Parameter & s) :-> ((Natural, ContractRef TransferParams) & s)

-- | Assumes the <a>Address</a> points to a <a>Parameter</a>
mkParameter :: Natural -> Address -> Parameter

-- | We have the addresses of: - The central wallet to transfer sub-tokens
--   to
type Storage = ()

-- | Wrap a <tt>to</tt> <a>Address</a> and number of tokens to transfer in
--   <a>TransferParams</a>, sending from <a>self</a>
toTransferParameter :: forall s. (Address & (Natural & s)) :-> (TransferParams & s)

-- | Run a transfer to the given central wallet <a>Address</a>, given the
--   token contract <a>Address</a> and the number of tokens to transfer
runSpecializedAnyTransfer :: Address -> (Natural & (ContractRef TransferParams & s)) :-> (Operation & s)

-- | Forwarder contract: forwards the given number of sub-tokens from its
--   own address to the central wallet.
specializedAnyForwarderContract :: Address -> ContractCode Parameter Storage

-- | <a>analyzeLorentz</a> specialized to the
--   <a>specializedAnyForwarderContract</a>
analyzeSpecializedAnyForwarder :: Address -> AnalyzerRes

-- | Verify that <a>SomeContract</a> is an instance of
--   <a>specializedAnyForwarderContract</a>, for some particular central
--   wallet address and token address.
verifyForwarderContract :: Address -> SomeContract -> Either String ()
instance Michelson.Typed.Haskell.Value.IsoValue Lorentz.Contracts.Forwarder.Specialized.FlushAny.Parameter
instance GHC.Generics.Generic Lorentz.Contracts.Forwarder.Specialized.FlushAny.Parameter
instance GHC.Show.Show Lorentz.Contracts.Forwarder.Specialized.FlushAny.Parameter
instance Lorentz.TypeAnns.HasTypeAnn Lorentz.Contracts.Forwarder.Specialized.FlushAny.Parameter
instance Lorentz.EntryPoints.Core.ParameterHasEntryPoints Lorentz.Contracts.Forwarder.Specialized.FlushAny.Parameter

module Lorentz.Contracts.Forwarder.Specialized.FlushAny.Tez

-- | We have the addresses of: - The central wallet to transfer sub-tokens
--   to
type Storage = ()

-- | Run a transfer to the given central wallet <a>Address</a>, given the
--   number of tokens to forward and the token contract reference.
--   
--   Always attempt to forward any Tez in <a>balance</a>.
runSpecializedAnyTezTransfer :: Address -> (Natural & (ContractRef TransferParams & s)) :-> ([Operation] & s)

-- | Forwarder contract: forwards the given number of sub-tokens from its
--   own address to the central wallet.
--   
--   It also forwards all held Tez to the central wallet.
specializedAnyTezForwarderContract :: Address -> ContractCode Parameter Storage

-- | <a>analyzeLorentz</a> specialized to the
--   <a>specializedAnyTezForwarderContract</a>
analyzeSpecializedAnyTezForwarder :: Address -> AnalyzerRes

-- | Verify that <a>SomeContract</a> is an instance of
--   <a>specializedAnyTezForwarderContract</a>, for some particular central
--   wallet address and token address.
verifyForwarderContract :: Address -> SomeContract -> Either String ()

module Lorentz.Contracts.Forwarder.Specialized.FlushAny.ForwardAnyFA12

-- | We have the addresses of: - The central wallet to transfer sub-tokens
--   to
type Storage = ()
data Parameter
Default :: () -> Parameter
Flush :: Parameter -> Parameter

-- | Run a transfer to the given central wallet <a>Address</a>, given
--   <a>Parameter</a>. If no <a>Parameter</a> is provided, skip forwarding
--   contract tokens.
--   
--   Always attempt to forward any Tez in <a>balance</a>.
runSpecializedAnyTezTransfer :: Address -> (Maybe Parameter & s) :-> ([Operation] & s)

-- | Forwarder contract: forwards the given number of sub-tokens from its
--   own address to the central wallet.
--   
--   It also forwards all held Tez to the central wallet.
specializedAnyFA12ForwarderContract :: Address -> ContractCode Parameter Storage

-- | <a>analyzeLorentz</a> specialized to the
--   <a>specializedAnyFA12ForwarderContract</a>
analyzeSpecializedAnyTezForwarder :: Address -> AnalyzerRes

-- | Verify that <a>SomeContract</a> is an instance of
--   <a>specializedAnyFA12ForwarderContract</a>, for some particular
--   central wallet address and token address.
verifyForwarderContract :: Address -> SomeContract -> Either String ()
instance GHC.Show.Show Lorentz.Contracts.Forwarder.Specialized.FlushAny.ForwardAnyFA12.Parameter
instance Michelson.Typed.Haskell.Value.IsoValue Lorentz.Contracts.Forwarder.Specialized.FlushAny.ForwardAnyFA12.Parameter
instance GHC.Generics.Generic Lorentz.Contracts.Forwarder.Specialized.FlushAny.ForwardAnyFA12.Parameter
instance Lorentz.EntryPoints.Core.ParameterHasEntryPoints Lorentz.Contracts.Forwarder.Specialized.FlushAny.ForwardAnyFA12.Parameter
instance Data.Singletons.Internal.SingI t => Lorentz.EntryPoints.Core.ParameterHasEntryPoints (Michelson.Typed.Aliases.Value t)
