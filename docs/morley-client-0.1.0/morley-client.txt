-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Developer tools for the Michelson Language
--   
--   This packages containts RPC client to interact with tezos-node.
@package morley-client
@version 0.1.0

module Morley.Client.Micheline

-- | Type class that provides an ability to convert something to Micheline
--   Expression.
class ToExpression a
toExpression :: ToExpression a => a -> Expression
class FromExpression a
fromExpression :: FromExpression a => Expression -> Maybe a
instance Michelson.Typed.Scope.UnpackedValScope t => Morley.Client.Micheline.FromExpression (Michelson.Typed.Aliases.Value t)
instance Michelson.Typed.Scope.UnpackedValScope t => Morley.Client.Micheline.FromExpression [Michelson.Untyped.Instr.ExpandedOp]
instance Morley.Client.Micheline.ToExpression (Michelson.Typed.Instr.Instr inp out)
instance Morley.Client.Micheline.ToExpression Michelson.Typed.T.T
instance Data.Singletons.Internal.SingI t => Morley.Client.Micheline.ToExpression (Michelson.Typed.Annotation.Notes t)
instance (Data.Singletons.Internal.SingI t, Michelson.Typed.Scope.HasNoOp t) => Morley.Client.Micheline.ToExpression (Michelson.Typed.Aliases.Value t)


-- | This module contains various types which are used in tezos-node RPC
--   API
module Morley.Client.Types
data AppliedResult
AppliedResult :: TezosInt64 -> TezosInt64 -> TezosInt64 -> [Address] -> AppliedResult
[arConsumedGas] :: AppliedResult -> TezosInt64
[arStorageSize] :: AppliedResult -> TezosInt64
[arPaidStorageDiff] :: AppliedResult -> TezosInt64
[arOriginatedContracts] :: AppliedResult -> [Address]
data BlockConstants
BlockConstants :: Text -> Text -> BlockConstants
[bcProtocol] :: BlockConstants -> Text
[bcChainId] :: BlockConstants -> Text
data BlockOperation
BlockOperation :: Text -> BlockOperation
[boHash] :: BlockOperation -> Text
data EntrypointParam t
EntrypointParam :: Maybe Text -> Value t -> EntrypointParam t
[epMbName] :: EntrypointParam t -> Maybe Text
[epParam] :: EntrypointParam t -> Value t
data ForgeOperation
ForgeOperation :: Text -> [Either TransactionOperation OriginationOperation] -> ForgeOperation
[foBranch] :: ForgeOperation -> Text
[foContents] :: ForgeOperation -> [Either TransactionOperation OriginationOperation]
data GetBigMap
GetBigMap :: Expression -> Expression -> GetBigMap
[bmKey] :: GetBigMap -> Expression
[bmType] :: GetBigMap -> Expression
data GetBigMapResult
GetBigMapResult :: Expression -> GetBigMapResult
GetBigMapNotFound :: GetBigMapResult
newtype InternalOperation
InternalOperation :: OperationResult -> InternalOperation
[unInternalOperation] :: InternalOperation -> OperationResult
newtype MichelsonExpression
MichelsonExpression :: Expression -> MichelsonExpression
data NodeInfo
NodeInfo :: Text -> Int -> Bool -> NodeInfo
[niUrl] :: NodeInfo -> Text
[niPort] :: NodeInfo -> Int
[niUseHttps] :: NodeInfo -> Bool
data OperationContent
OperationContent :: RunMetadata -> OperationContent
data OperationResult
OperationApplied :: AppliedResult -> OperationResult
OperationFailed :: [RunError] -> OperationResult
data OriginationOperation
OriginationOperation :: Text -> Address -> TezosInt64 -> TezosInt64 -> TezosInt64 -> TezosInt64 -> TezosInt64 -> OriginationScript -> OriginationOperation
[ooKind] :: OriginationOperation -> Text
[ooSource] :: OriginationOperation -> Address
[ooFee] :: OriginationOperation -> TezosInt64
[ooCounter] :: OriginationOperation -> TezosInt64
[ooGasLimit] :: OriginationOperation -> TezosInt64
[ooStorageLimit] :: OriginationOperation -> TezosInt64
[ooBalance] :: OriginationOperation -> TezosInt64
[ooScript] :: OriginationOperation -> OriginationScript
data OriginationScript
OriginationScript :: Expression -> Expression -> OriginationScript
[osCode] :: OriginationScript -> Expression
[osStorage] :: OriginationScript -> Expression
data ParametersInternal
ParametersInternal :: Text -> Expression -> ParametersInternal
[piEntrypoint] :: ParametersInternal -> Text
[piValue] :: ParametersInternal -> Expression
data PreApplyOperation
PreApplyOperation :: Text -> Text -> [Either TransactionOperation OriginationOperation] -> Signature -> PreApplyOperation
[paoProtocol] :: PreApplyOperation -> Text
[paoBranch] :: PreApplyOperation -> Text
[paoContents] :: PreApplyOperation -> [Either TransactionOperation OriginationOperation]
[paoSignature] :: PreApplyOperation -> Signature
data RunError
RuntimeError :: Address -> RunError
ScriptRejected :: MichelsonExpression -> RunError
BadContractParameter :: Address -> RunError
InvalidConstant :: MichelsonExpression -> MichelsonExpression -> RunError
InconsistentTypes :: MichelsonExpression -> MichelsonExpression -> RunError
InvalidPrimitive :: [Text] -> Text -> RunError
InvalidSyntacticConstantError :: MichelsonExpression -> MichelsonExpression -> RunError
UnexpectedContract :: RunError
IllFormedType :: MichelsonExpression -> RunError
UnexpectedOperation :: RunError
data RunMetadata
RunMetadata :: OperationResult -> [InternalOperation] -> RunMetadata
[rmOperationResult] :: RunMetadata -> OperationResult
[rmInternalOperationResults] :: RunMetadata -> [InternalOperation]
data RunOperation
RunOperation :: RunOperationInternal -> Text -> RunOperation
[roOperation] :: RunOperation -> RunOperationInternal
[roChainId] :: RunOperation -> Text
data RunOperationInternal
RunOperationInternal :: Text -> [Either TransactionOperation OriginationOperation] -> Signature -> RunOperationInternal
[roiBranch] :: RunOperationInternal -> Text
[roiContents] :: RunOperationInternal -> [Either TransactionOperation OriginationOperation]
[roiSignature] :: RunOperationInternal -> Signature
data RunOperationResult
RunOperationResult :: [OperationContent] -> RunOperationResult
[rrOperationContents] :: RunOperationResult -> [OperationContent]
data SenderInfo
SenderInfo :: Address -> SecretKey -> SenderInfo
[siAddress] :: SenderInfo -> Address
[siSecretKey] :: SenderInfo -> SecretKey
data TransactionOperation
TransactionOperation :: Text -> Address -> TezosInt64 -> TezosInt64 -> TezosInt64 -> TezosInt64 -> TezosInt64 -> Address -> ParametersInternal -> TransactionOperation
[toKind] :: TransactionOperation -> Text
[toSource] :: TransactionOperation -> Address
[toFee] :: TransactionOperation -> TezosInt64
[toCounter] :: TransactionOperation -> TezosInt64
[toGasLimit] :: TransactionOperation -> TezosInt64
[toStorageLimit] :: TransactionOperation -> TezosInt64
[toAmount] :: TransactionOperation -> TezosInt64
[toDestination] :: TransactionOperation -> Address
[toParameters] :: TransactionOperation -> ParametersInternal
combineResults :: OperationResult -> OperationResult -> OperationResult
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.OriginationScript
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.GetBigMapResult
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.NodeInfo
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.BlockOperation
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.BlockConstants
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.GetBigMap
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.RunOperation
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.OriginationOperation
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.OriginationScript
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.TransactionOperation
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.ParametersInternal
instance GHC.Show.Show Morley.Client.Types.AppliedResult
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.MichelsonExpression
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.ForgeOperation
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.RunOperationInternal
instance Data.Aeson.Types.ToJSON.ToJSON Morley.Client.Types.PreApplyOperation
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.RunOperationResult
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.OperationContent
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.RunMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.InternalOperation
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.OperationResult
instance GHC.Base.Semigroup Morley.Client.Types.AppliedResult
instance GHC.Base.Monoid Morley.Client.Types.AppliedResult
instance Data.Aeson.Types.FromJSON.FromJSON Morley.Client.Types.RunError
instance Formatting.Buildable.Buildable Morley.Client.Types.RunError
instance Formatting.Buildable.Buildable Morley.Client.Types.MichelsonExpression

module Morley.Client.Parser
data ClientArgs
ClientArgs :: NodeInfo -> ClientArgsRaw -> ClientArgs
data ClientArgsRaw
Originate :: SenderInfo -> OriginateArgs -> ClientArgsRaw
Transfer :: SenderInfo -> TransferArgs -> ClientArgsRaw
data OriginateArgs
OriginateArgs :: !Maybe FilePath -> !Natural -> !Value -> OriginateArgs
[oaMbContractFile] :: OriginateArgs -> !Maybe FilePath
[oaInitialBalance] :: OriginateArgs -> !Natural
[oaInitialStorage] :: OriginateArgs -> !Value
data TransferArgs
TransferArgs :: !Address -> !Natural -> !Value -> TransferArgs
[taDestination] :: TransferArgs -> !Address
[taAmount] :: TransferArgs -> !Natural
[taParameter] :: TransferArgs -> !Value
data NodeInfoRef
NodeInfoGiven :: NodeInfo -> NodeInfoRef
NodeInfoFromConfig :: FilePath -> NodeInfoRef
argParser :: Parser ClientArgs
nodeInfoOptions :: Parser NodeInfo
nodeInfoRefOptions :: Parser NodeInfoRef
getFromNodeInfoRef :: (MonadIO m, MonadThrow m) => NodeInfoRef -> m NodeInfo

module Morley.Client.HttpClient
getClientEnv :: NodeInfo -> IO ClientEnv


-- | Various errors that can happen in `morley-client`
module Morley.Client.Error

-- | Errors that can happen during operations preapply
data PreApplyError
PreApplyEmptyResult :: PreApplyError
PreApplyFailed :: [RunError] -> PreApplyError
PreApplyUnexpectedSizeResult :: Int -> Int -> PreApplyError
PreApplyOriginatedMoreContracts :: [Address] -> PreApplyError
instance Formatting.Buildable.Buildable Morley.Client.Error.PreApplyError
instance GHC.Show.Show Morley.Client.Error.PreApplyError
instance GHC.Exception.Type.Exception Morley.Client.Error.PreApplyError


-- | This module contains servant types for tezos-node RPC API.
module Morley.Client.API
forgeOperation :: ForgeOperation -> ClientM HexJSONByteString
getBlockConstants :: Text -> ClientM BlockConstants
getCounter :: Text -> ClientM TezosInt64
getHeadBlockOperations :: Text -> ClientM [[BlockOperation]]
getScript :: Text -> ClientM OriginationScript
getLastBlock :: ClientM Text
injectOperation :: Maybe Text -> Text -> ClientM Text
preApplyOperations :: [PreApplyOperation] -> ClientM [RunOperationResult]
runOperation :: RunOperation -> ClientM RunOperationResult
getBigMap :: Text -> GetBigMap -> ClientM GetBigMapResult

module Morley.Client.Util
calcFees :: TezosInt64 -> TezosInt64 -> TezosInt64
prepareOpForInjection :: ByteString -> Signature -> Text
throwLeft :: (MonadThrow m, Exception e) => m (Either e a) -> m a
decodeOriginationScriptCode :: OriginationScript -> Either UnpackError Contract

module Morley.Client.AbstractClient

-- | Type class which provides basic low-level tezos-node functionality
class (Monad m, MonadThrow m) => HasTezosNodeRpc m

-- | Get hash of the current head block, this head hash is used in other
--   RPC calls.
getHeadBlock :: HasTezosNodeRpc m => m Text

-- | Get address counter, which is required for both transaction sending
--   and contract origination.
getCounter :: HasTezosNodeRpc m => Address -> m TezosInt64

-- | Get block constants that required by other RPC calls.
getBlockConstants :: HasTezosNodeRpc m => Text -> m BlockConstants

-- | Perform operation run, this operation doesn't require proper signing.
--   As a result it returns burned gas and storage diff (also list of
--   originated contracts but their addresses are incorrect due to the fact
--   that operation could be not signed properly) or indicates about
--   operation failure.
runOperation :: HasTezosNodeRpc m => RunOperation -> m RunOperationResult

-- | Preapply list of operations, each operation has to be signed with
--   sender secret key. As a result it returns list of results each of
--   which has information about burned gas, storage diff size and
--   originated contracts.
preApplyOperations :: HasTezosNodeRpc m => [PreApplyOperation] -> m [RunOperationResult]

-- | Forge operation in order to receive its hexadecimal representation.
forgeOperation :: HasTezosNodeRpc m => ForgeOperation -> m HexJSONByteString

-- | Inject operation, note that this operation has to be signed before
--   injection. As a result it returns operation hash.
injectOperation :: HasTezosNodeRpc m => Text -> m Text

-- | Get code and storage of the desired contract. Note that both code and
--   storage are presented in low-level Micheline representation.
getContractScript :: HasTezosNodeRpc m => Address -> m OriginationScript

-- | Wait until operation known by some hash is included into the chain.
waitForOperationInclusion :: HasTezosNodeRpc m => Text -> m Text

-- | Get big map value by contract address.
getContractBigMap :: HasTezosNodeRpc m => Address -> GetBigMap -> m GetBigMapResult
instance Morley.Client.AbstractClient.HasTezosNodeRpc (Control.Monad.Trans.Reader.ReaderT Servant.Client.Internal.HttpClient.ClientEnv GHC.Types.IO)


-- | Some read-only RPC functions.
module Morley.Client.Getters

-- | Failed to decode received value to the given type.
data ValueDecodeFailure
ValueDecodeFailure :: Text -> T -> ValueDecodeFailure
data ValueNotFound
ValueNotFound :: ValueNotFound

-- | Read big_map value of given contract by key.
--   
--   If the contract contains several <tt>big_map</tt>s with given key
--   type, only one of them will be considered.
readContractBigMapValue :: forall k v m. (PackedValScope k, UnpackedValScope v, HasTezosNodeRpc m) => Address -> Value k -> m (Value v)
instance GHC.Exception.Type.Exception Morley.Client.Getters.ValueNotFound
instance GHC.Show.Show Morley.Client.Getters.ValueNotFound
instance Formatting.Buildable.Buildable Morley.Client.Getters.ValueNotFound
instance GHC.Exception.Type.Exception Morley.Client.Getters.ValueDecodeFailure
instance GHC.Show.Show Morley.Client.Getters.ValueDecodeFailure
instance Formatting.Buildable.Buildable Morley.Client.Getters.ValueDecodeFailure


-- | Module with functions that used in both transaction sending and
--   contract origination.
module Morley.Client.Common

-- | Datatype that contains various values required for chain operations.
data OperationConstants
OperationConstants :: Text -> BlockConstants -> TezosInt64 -> OperationConstants

-- | Block in which operations is going to be injected
[ocLastBlockHash] :: OperationConstants -> Text

-- | Information about block: chain_id and protocol
[ocBlockConstants] :: OperationConstants -> BlockConstants

-- | Sender counter
[ocCounter] :: OperationConstants -> TezosInt64
addOperationPrefix :: ByteString -> ByteString

-- | Perform runOperation or preApplyOperations and combine the results.
getAppliedResults :: HasTezosNodeRpc m => Either RunOperation PreApplyOperation -> m [AppliedResult]

-- | Preprocess chain operation in order to get required constants.
preProcessOperation :: HasTezosNodeRpc m => Address -> m OperationConstants
stubSignature :: Signature

module Morley.Client.Transaction

-- | Perform sequence of transactions to the contract, each transactions
--   should be defined via <tt>EntrypointParam t</tt>. Returns operation
--   hash and block in which this operation appears.
runTransactions :: forall t m. (HasTezosNodeRpc m, ParameterScope t) => SenderInfo -> Address -> [EntrypointParam t] -> m (Text, Text)
data LEntrypointParam t
LEntrypointParam :: Maybe Text -> t -> LEntrypointParam t
[lepMbName] :: LEntrypointParam t -> Maybe Text
[lepParam] :: LEntrypointParam t -> t

-- | Lorentz version of <a>runTransactions</a>
lRunTransactions :: forall m t. (HasTezosNodeRpc m, NiceParameter t) => SenderInfo -> Address -> [LEntrypointParam t] -> m (Text, Text)

module Morley.Client.Origination

-- | Originate given contract with given initial storage. Returns operation
--   hash, block in which this operation appears and originated contract
--   address.
originateContract :: forall m cp st. HasTezosNodeRpc m => SenderInfo -> FullContract cp st -> Value st -> m (Text, Text, Address)

-- | Lorentz version of <a>originateContract</a>
lOriginateContract :: (HasTezosNodeRpc m, NiceStorage st, NiceParameterFull cp) => SenderInfo -> ContractCode cp st -> st -> m (Text, Text, Address)
