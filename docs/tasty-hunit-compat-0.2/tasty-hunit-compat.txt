-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tasty integration with the existing HUnit package.
--   
--   Existing `tasty-hunit` package now declares its own testing
--   primitives. This package provides an integration of the existing HUnit
--   package with Tasty that inter-operates properly with other HUnit code.
@package tasty-hunit-compat
@version 0.2


-- | HUnit support for tasty.
--   
--   We don't use `tasty-hunit` directly because it doesn't interoperate
--   properly with other HUnit-based code. Specifically, it defines its own
--   <tt>HUnitFailure</tt> type and catches exceptions of this type. It
--   doesn't catch HUnit's <tt>HUnitFailure</tt>, so they are not
--   pretty-printed.
module Test.Tasty.HUnit

-- | Turn an <a>Assertion</a> into a tasty test case
testCase :: TestName -> Assertion -> TestTree
testCaseInfo :: TestName -> IO String -> TestTree
testCaseSteps :: TestName -> ((String -> IO ()) -> Assertion) -> TestTree

-- | Unconditionally signals that a failure has occured. All other
--   assertions can be expressed with the form:
--   
--   <pre>
--   if conditionIsMet
--       then IO ()
--       else assertFailure msg
--   </pre>
assertFailure :: HasCallStack => String -> IO a

-- | Asserts that the specified condition holds.
assertBool :: HasCallStack -> String -> Bool -> Assertion

-- | Asserts that the specified actual value is equal to the expected
--   value. The output message will contain the prefix, the expected value,
--   and the actual value.
--   
--   If the prefix is the empty string (i.e., <tt>""</tt>), then the prefix
--   is omitted and only the expected and actual values are output.
assertEqual :: (HasCallStack, Eq a, Show a) => String -> a -> a -> Assertion

-- | Asserts that the specified actual value is equal to the expected value
--   (with the expected value on the left-hand side).
(@=?) :: (HasCallStack, Eq a, Show a) => a -> a -> Assertion
infix 1 @=?

-- | Asserts that the specified actual value is equal to the expected value
--   (with the actual value on the left-hand side).
(@?=) :: (HasCallStack, Eq a, Show a) => a -> a -> Assertion
infix 1 @?=

-- | Asserts that the condition obtained from the specified
--   <a>AssertionPredicable</a> holds.
(@?) :: (HasCallStack, AssertionPredicable t) => t -> String -> Assertion
infix 1 @?

-- | Used to signify that a data type can be converted to an assertion
--   predicate.
class AssertionPredicable t
assertionPredicate :: AssertionPredicable t => t -> AssertionPredicate

-- | When an assertion is evaluated, it will output a message if and only
--   if the assertion fails.
--   
--   Test cases are composed of a sequence of one or more assertions.
type Assertion = IO ()
data HUnitFailure

-- | Request a CallStack.
--   
--   NOTE: The implicit parameter <tt>?callStack :: CallStack</tt> is an
--   implementation detail and <b>should not</b> be considered part of the
--   <a>CallStack</a> API, we may decide to change the implementation in
--   the future.
type HasCallStack = ?callStack :: CallStack
