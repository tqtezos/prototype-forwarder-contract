-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Network testing infrastructure based on Morley.
--   
--   This package facilitates testing Michelson contracts on a real
--   network.
@package morley-nettest
@version 0.1.0


-- | Abstract nettest interface not bound to a particular implementation.
--   
--   The interface may look a bit untyped and unsafe in some places. For
--   example, in order to call a contract one should supply a simple
--   address rather than a contract ref, so it is easy to pass a value of
--   wrong type. Also it is easy to call a non-existing entrypoint.
--   
--   Subjectively, it makes writing test scenarios easier because you have
--   to prove less to the compiler. It also makes implementation of nettest
--   engine a bit easier. Of course, it also makes it easier to make
--   certain mistakes. However, we expect users of this interface to also
--   use the functionality of the <a>Pure</a> module and convert nettest
--   scenarios to purely testable scenarios for integrational testing
--   engine. In this case errors should be detected almost as quickly as
--   they would reported by the compiler, at least before trying to run
--   scenario on a live network.
--   
--   Also this interface uses <a>Address</a> rather than <a>EpAddress</a>.
--   I (@gromak) concluded that <a>EpAddress</a> can not be passed to
--   <tt>tezos-client</tt>. For key addresses it just does not make sense
--   and for contract addresses I get such errors:
--   
--   <pre>
--   bad contract notation
--   Invalid contract notation "KT1VrFpBPwBTm3hsK7DB7SPmY8fTHJ3vY6sJ%mint"
--   </pre>
module Morley.Nettest.Abstract

-- | Representation of an address that <tt>tezos-client</tt> uses. It can
--   be an address itself or a textual alias.
data AddrOrAlias

-- | Address itself, can be used as is.
AddrResolved :: Address -> AddrOrAlias

-- | Address alias, should be resolved by <tt>tezos-client</tt>.
AddrAlias :: Text -> AddrOrAlias
data OriginateData
OriginateData :: AddrOrAlias -> Text -> Word64 -> st -> ContractCode param st -> OriginateData

-- | The address from which contract will be originated (must have some
--   XTZ).
[odFrom] :: OriginateData -> AddrOrAlias

-- | Alias for the originated contract.
[odName] :: OriginateData -> Text

-- | Initial balance.
[odBalance] :: OriginateData -> Word64

-- | Initial storage.
[odStorage] :: OriginateData -> st

-- | The contract itself.
--   
--   We are using Lorentz version here which is convenient. However, keep
--   in mind that:
--   
--   <ol>
--   <li>If someone wants to test a contract from `.tz` file, they will
--   have to convert it to Lorentz somehow, which sounds bad, so in this
--   case we'll have to provide another version that takes typed contract.
--   Let's do it only if the need arises.</li>
--   <li>In TM-366 we want to move optimizer call and other preprocessing
--   to Lorentz compilation. So conversion to typed contract will require
--   an additional argument. Note that we'll have the same problem in
--   integrational testing eDSL as well, so let's handle them both at once.
--   I think that usually we'll want to apply the same compilation options
--   to all contracts, so we can simply add them to some runner. Or we can
--   use default options and add a command that modifies them for further
--   calls.</li>
--   </ol>
[odContract] :: OriginateData -> ContractCode param st
data TransferData
TransferData :: AddrOrAlias -> AddrOrAlias -> Word64 -> EpName -> v -> TransferData

-- | Sender address for this transaction.
[tdFrom] :: TransferData -> AddrOrAlias

-- | Receiver address for this transaction.
[tdTo] :: TransferData -> AddrOrAlias

-- | Amount to be transferred.
[tdAmount] :: TransferData -> Word64

-- | An entrypoint to be called. Consider using <a>ep</a> in testing
--   scenarios.
[tdEntrypoint] :: TransferData -> EpName

-- | Parameter that will be used for a contract call. Set to <tt>()</tt>
--   for transfers to key addresses.
[tdParameter] :: TransferData -> v

-- | A record data type with all base methods one can use during nettest.
data NettestImpl m
NettestImpl :: (AddrOrAlias -> m Address) -> (Text -> m Address) -> (Text -> m Address) -> (OriginateData -> m Address) -> (TransferData -> m ()) -> (Text -> m ()) -> (forall a. m a -> NettestFailure -> m ()) -> NettestImpl m

-- | Unwrap an <a>Address</a> or get an <a>Address</a> corresponding to an
--   alias.
[niResolveAddr] :: NettestImpl m -> AddrOrAlias -> m Address

-- | Generate a secret key and store it with given alias. If a key with
--   this alias already exists, the corresponding address will be returned
--   and no state will be changed.
[niGenKey] :: NettestImpl m -> Text -> m Address

-- | Generate a secret key and store it with given alias. Unlike
--   <a>niGenKey</a> this function overwrites the existing key when given
--   alias is already stored.
[niGenFreshKey] :: NettestImpl m -> Text -> m Address

-- | Originate a new contract with given data.
[niOriginate] :: NettestImpl m -> OriginateData -> m Address

-- | Send a transaction with given data.
[niTransfer] :: NettestImpl m -> TransferData -> m ()

-- | Print given string verbatim as a comment.
[niComment] :: NettestImpl m -> Text -> m ()

-- | Expect a failure while running another action
[niExpectFailure] :: NettestImpl m -> forall a. m a -> NettestFailure -> m ()

-- | Any monadic computation that can only access nettest methods.
type NettestScenario = forall m. Monad m => NettestImpl m -> m ()

-- | This address will be used as source by default. Some functionality in
--   this module assumes that this address has <i>sufficient</i> amount of
--   XTZ in advance (required amount depends on scenario).
nettestAddr :: AddrOrAlias

-- | <a>Text</a> inside <a>nettestAddr</a>.
nettestAddrText :: Text

-- | Alias for <a>niResolveAddr</a>.
resolveAddrAction :: NettestImpl m -> AddrOrAlias -> m Address

-- | Get <a>Address</a> corresponding to <a>nettestAddr</a>.
resolveNettestAddrAction :: NettestImpl m -> m Address

-- | Generate a new secret key and record it with given alias. Also
--   transfer small amount of XTZ to it from <a>nettestAddr</a>. Does not
--   override an existing address.
newAddressAction :: Monad m => NettestImpl m -> Text -> m Address

-- | Generate a new secret key and record it with given alias. If the alias
--   is already known, the key will be overwritten. The address is
--   guaranteed to be fresh, i. e. no operations on it have been made.
newFreshAddressAction :: NettestImpl m -> Text -> m Address

-- | Alias for <a>niOriginate</a>.
originateAction :: NettestImpl m -> OriginateData -> m Address

-- | A simplified version of the originate command. Uses default address
--   (<a>nettestAddr</a>). The contract will have 0 balance.
originateSimpleAction :: (NiceParameterFull param, NiceStorage st) => NettestImpl m -> Text -> st -> ContractCode param st -> m Address

-- | Alias for <a>niTransfer</a>.
transferAction :: NettestImpl m -> TransferData -> m ()

-- | Call a certain entrypoint of a contract referred to by some address.
--   The sender is <a>nettestAddr</a>, so it should have sufficient XTZ to
--   pay tx fee.
callAction :: (Show v, NiceParameter v) => NettestImpl m -> AddrOrAlias -> EpName -> v -> m ()

-- | Call a certain entrypoint of a contract referred to by the second
--   address from the first address.
callFromAction :: (Show v, NiceParameter v) => NettestImpl m -> AddrOrAlias -> AddrOrAlias -> EpName -> v -> m ()

-- | Alias for <a>niComment</a>.
commentAction :: NettestImpl m -> Text -> m ()

-- | Alias for <a>niExpectFailure</a>.
expectFailureAction :: NettestImpl m -> m a -> NettestFailure -> m ()

-- | Failures that could be expected in the execution of a
--   <a>NettestScenario</a> action
data NettestFailure
NettestFailedWith :: NettestFailure
NettestMutezArithError :: ArithErrorType -> NettestFailure
NettestShiftArithError :: NettestFailure
NettestGasExhaustion :: NettestFailure

-- | A short partial constructor for <a>EpName</a>. It is supposed to be
--   applied to string constants, so programmer is responsible for
--   validity. And this code is for tests anyway, so each failure is a
--   programmer mistake.
--   
--   It is intentionally here and not in some deeper module because the
--   name is really short and more suitable for writing scenarios.
ep :: HasCallStack => Text -> EpName
instance GHC.Classes.Eq Morley.Nettest.Abstract.NettestFailure
instance GHC.Show.Show Morley.Nettest.Abstract.NettestFailure
instance GHC.Classes.Ord Morley.Nettest.Abstract.AddrOrAlias
instance GHC.Classes.Eq Morley.Nettest.Abstract.AddrOrAlias
instance GHC.Show.Show Morley.Nettest.Abstract.AddrOrAlias
instance GHC.Show.Show Morley.Nettest.Abstract.TransferData
instance GHC.Exception.Type.Exception Morley.Nettest.Abstract.NettestFailure
instance Formatting.Buildable.Buildable Morley.Nettest.Abstract.NettestFailure
instance Formatting.Buildable.Buildable Morley.Nettest.Abstract.AddrOrAlias


-- | <tt>caps</tt>-based interface for nettest.
module Morley.Nettest.Caps

-- | Constraint for a monad in which we can do nettest actions. It requires
--   <a>NettestImpl</a> capability.
type MonadNettest caps base m = (Monad base, m ~ CapsT caps base, HasCap NettestImpl caps)

-- | Monad transformer that adds only <a>NettestImpl</a> capability.
type NettestT m = CapsT '[NettestImpl] m

-- | <a>resolveAddrAction</a> adapted to <tt>caps</tt>.
resolveAddr :: MonadNettest caps base m => AddrOrAlias -> m Address

-- | <a>resolveAddrAction</a> adapted to <tt>caps</tt>.
resolveNettestAddr :: MonadNettest caps base m => m Address

-- | <a>newAddressAction</a> adapted to <tt>caps</tt>.
newAddress :: MonadNettest caps base m => Text -> m Address

-- | <a>newFreshAddressAction</a> adapted to <tt>caps</tt>.
newFreshAddress :: MonadNettest caps base m => Text -> m Address

-- | <a>originateAction</a> adapted to <tt>caps</tt>.
originate :: MonadNettest caps base m => OriginateData -> m Address

-- | <a>originateSimpleAction</a> adapted to <tt>caps</tt>.
originateSimple :: (MonadNettest caps base m, NiceParameterFull param, NiceStorage st) => Text -> st -> ContractCode param st -> m Address

-- | <a>transferAction</a> adapted to <tt>caps</tt>.
transfer :: MonadNettest caps base m => TransferData -> m ()

-- | <a>callAction</a> adapted to <tt>caps</tt>.
call :: (MonadNettest caps base m, NiceParameter v, Show v) => AddrOrAlias -> EpName -> v -> m ()

-- | <a>callFromAction</a> adapted to <tt>caps</tt>.
callFrom :: (MonadNettest caps base m, NiceParameter v, Show v) => AddrOrAlias -> AddrOrAlias -> EpName -> v -> m ()

-- | <a>commentAction</a> adapted to <tt>caps</tt>.
comment :: MonadNettest caps base m => Text -> m ()

-- | <a>expectFailureAction</a> adapted to <tt>caps</tt>.
expectFailure :: MonadNettest caps base m => m a -> NettestFailure -> m ()

-- | Adapt <tt>caps</tt>-based interface back to argument passing style.
uncapsNettest :: forall m a. Monad m => NettestT m a -> NettestImpl m -> m a
instance Morley.Nettest.Caps.MonadNettest caps base m => Morley.Nettest.Caps.ActionToCaps m (m a)
instance Morley.Nettest.Caps.ActionToCaps m r => Morley.Nettest.Caps.ActionToCaps m (x -> r)


-- | Implementation that works with real Tezos network, it talks to a Tezos
--   node and uses `tezos-client`.
module Morley.Nettest.Client

-- | Configuration of nettest implementation for real network.
data NettestClientConfig
NettestClientConfig :: Maybe Text -> Maybe Text -> Maybe Word16 -> FilePath -> Bool -> Bool -> NettestClientConfig
[nccScenarioName] :: NettestClientConfig -> Maybe Text
[nccNodeAddress] :: NettestClientConfig -> Maybe Text
[nccNodePort] :: NettestClientConfig -> Maybe Word16
[nccTezosClient] :: NettestClientConfig -> FilePath
[nccNodeUseHttps] :: NettestClientConfig -> Bool
[nccVerbose] :: NettestClientConfig -> Bool
data NettestClientError
UnexpectedClientFailure :: Text -> NettestClientError
UnknownAddress :: Text -> Text -> NettestClientError
UnexpectedClientSuccess :: NettestClientError

-- | Run <a>NettestScenario</a> using implementation for real network.
--   Throws an error if an unexpected failure occurs or if an expected one
--   doesn't
runNettestClient :: NettestClientConfig -> NettestScenario -> IO ()

-- | Implementation that works with real network and uses `tezos-node` RPC
--   and `tezos-client`.
nettestImplClient :: NettestClientConfig -> NettestImpl IO
instance GHC.Classes.Eq Morley.Nettest.Client.NettestClientError
instance GHC.Show.Show Morley.Nettest.Client.NettestClientError
instance GHC.Show.Show Morley.Nettest.Client.NettestClientConfig
instance GHC.Exception.Type.Exception Morley.Nettest.Client.NettestClientError
instance Formatting.Buildable.Buildable Morley.Nettest.Client.NettestClientError


-- | Common command line options for nettest.
module Morley.Nettest.CLI
getClientConfig :: Maybe Text -> IO NettestClientConfig

-- | Standard command line options parser for <a>NettestClientConfig</a>.
clientConfigParser :: Maybe Text -> Parser NettestClientConfig
scenarioNameOption :: Parser (Maybe Text)
nodeAddressOption :: Parser (Maybe Text)
nodePortOption :: Parser (Maybe Word16)
tezosClientOption :: Parser FilePath
useTlsFlag :: Parser Bool
verboseFlag :: Parser Bool


-- | Integration with integrational testing engine (pun intended).
module Morley.Nettest.Pure

-- | Run a <a>NettestScenario</a> by converting it to integrational
--   scenario and then passing to HUnit engine. Throws an exception in case
--   of an unexpected failure.
--   
--   It is suitable for very simple test-suites where we just want to test
--   scenario quickly first and then run it on real network in case we
--   consider it valid.
runNettestViaIntegrational :: NettestScenario -> IO ()

-- | Build <a>IntegrationalScenario</a> out of <a>NettestScenario</a>. Also
--   accepts a <tt>NettestExpectation</tt> to validate the result of the
--   scenario
nettestToIntegrational :: NettestScenario -> IntegrationalScenario
instance GHC.Classes.Eq Morley.Nettest.Pure.BadScenario
instance GHC.Show.Show Morley.Nettest.Pure.BadScenario
instance GHC.Exception.Type.Exception Morley.Nettest.Pure.BadScenario


-- | Michelson contracts testing on a real Tezos network.
--   
--   It defines an interface for writing network testing scenarios and
--   provides two implementations: one of them talks to reference Tezos
--   software and submits operations to real network, the other one
--   converts scenario to the existing integrational testing eDSL.
--   
--   Expected usage is the following: 1. Write a scenario using abstract
--   nettest interface. 2. Make an executable (i. e. something that can be
--   executed: executable or test-suite in .cabal file, normally the
--   latter) which runs this scenario via pure integrational testing engine
--   first (as a quick check for correctness) and then via <tt>Client</tt>
--   implementation. This executable is supposed to run periodically, but
--   not in each MR on each change. 3. Also run this scenario in existing
--   test-suite using pure implementation. So pure implementation will be
--   used twice: in normal test-suite that runs on each change (which
--   proves that it is <i>likely</i> correct) and in real network test to
--   prevent that test from starting if the scenario is <i>most likely</i>
--   <b>not</b> correct. 4. Note that in order to run it on a real network
--   you should have an address with <tt>nettest</tt> alias and it should
--   have sufficient balance to run the scenario.
--   
--   TODO: ★ [#50] Collect gas and other statistics in nettest. ★ [#52] Use
--   RPC directly except for signing and key management, use features such
--   as batching. ★ [#53] Maybe somehow merge with testing eDSL. ★ [#54]
--   tezos-client internals should be wrapped into some API and moved
--   somewhere into reusable place. ★ [#55] Add command line options
--   parsing.
module Morley.Nettest

-- | Representation of an address that <tt>tezos-client</tt> uses. It can
--   be an address itself or a textual alias.
data AddrOrAlias

-- | Address itself, can be used as is.
AddrResolved :: Address -> AddrOrAlias

-- | Address alias, should be resolved by <tt>tezos-client</tt>.
AddrAlias :: Text -> AddrOrAlias
data OriginateData
OriginateData :: AddrOrAlias -> Text -> Word64 -> st -> ContractCode param st -> OriginateData

-- | The address from which contract will be originated (must have some
--   XTZ).
[odFrom] :: OriginateData -> AddrOrAlias

-- | Alias for the originated contract.
[odName] :: OriginateData -> Text

-- | Initial balance.
[odBalance] :: OriginateData -> Word64

-- | Initial storage.
[odStorage] :: OriginateData -> st

-- | The contract itself.
--   
--   We are using Lorentz version here which is convenient. However, keep
--   in mind that:
--   
--   <ol>
--   <li>If someone wants to test a contract from `.tz` file, they will
--   have to convert it to Lorentz somehow, which sounds bad, so in this
--   case we'll have to provide another version that takes typed contract.
--   Let's do it only if the need arises.</li>
--   <li>In TM-366 we want to move optimizer call and other preprocessing
--   to Lorentz compilation. So conversion to typed contract will require
--   an additional argument. Note that we'll have the same problem in
--   integrational testing eDSL as well, so let's handle them both at once.
--   I think that usually we'll want to apply the same compilation options
--   to all contracts, so we can simply add them to some runner. Or we can
--   use default options and add a command that modifies them for further
--   calls.</li>
--   </ol>
[odContract] :: OriginateData -> ContractCode param st
data TransferData
TransferData :: AddrOrAlias -> AddrOrAlias -> Word64 -> EpName -> v -> TransferData

-- | Sender address for this transaction.
[tdFrom] :: TransferData -> AddrOrAlias

-- | Receiver address for this transaction.
[tdTo] :: TransferData -> AddrOrAlias

-- | Amount to be transferred.
[tdAmount] :: TransferData -> Word64

-- | An entrypoint to be called. Consider using <a>ep</a> in testing
--   scenarios.
[tdEntrypoint] :: TransferData -> EpName

-- | Parameter that will be used for a contract call. Set to <tt>()</tt>
--   for transfers to key addresses.
[tdParameter] :: TransferData -> v

-- | A record data type with all base methods one can use during nettest.
data NettestImpl m
NettestImpl :: (AddrOrAlias -> m Address) -> (Text -> m Address) -> (Text -> m Address) -> (OriginateData -> m Address) -> (TransferData -> m ()) -> (Text -> m ()) -> (forall a. m a -> NettestFailure -> m ()) -> NettestImpl m

-- | Unwrap an <a>Address</a> or get an <a>Address</a> corresponding to an
--   alias.
[niResolveAddr] :: NettestImpl m -> AddrOrAlias -> m Address

-- | Generate a secret key and store it with given alias. If a key with
--   this alias already exists, the corresponding address will be returned
--   and no state will be changed.
[niGenKey] :: NettestImpl m -> Text -> m Address

-- | Generate a secret key and store it with given alias. Unlike
--   <a>niGenKey</a> this function overwrites the existing key when given
--   alias is already stored.
[niGenFreshKey] :: NettestImpl m -> Text -> m Address

-- | Originate a new contract with given data.
[niOriginate] :: NettestImpl m -> OriginateData -> m Address

-- | Send a transaction with given data.
[niTransfer] :: NettestImpl m -> TransferData -> m ()

-- | Print given string verbatim as a comment.
[niComment] :: NettestImpl m -> Text -> m ()

-- | Expect a failure while running another action
[niExpectFailure] :: NettestImpl m -> forall a. m a -> NettestFailure -> m ()

-- | Any monadic computation that can only access nettest methods.
type NettestScenario = forall m. Monad m => NettestImpl m -> m ()

-- | This address will be used as source by default. Some functionality in
--   this module assumes that this address has <i>sufficient</i> amount of
--   XTZ in advance (required amount depends on scenario).
nettestAddr :: AddrOrAlias

-- | Alias for <a>niResolveAddr</a>.
resolveAddrAction :: NettestImpl m -> AddrOrAlias -> m Address

-- | Get <a>Address</a> corresponding to <a>nettestAddr</a>.
resolveNettestAddrAction :: NettestImpl m -> m Address

-- | Generate a new secret key and record it with given alias. Also
--   transfer small amount of XTZ to it from <a>nettestAddr</a>. Does not
--   override an existing address.
newAddressAction :: Monad m => NettestImpl m -> Text -> m Address

-- | Alias for <a>niOriginate</a>.
originateAction :: NettestImpl m -> OriginateData -> m Address

-- | A simplified version of the originate command. Uses default address
--   (<a>nettestAddr</a>). The contract will have 0 balance.
originateSimpleAction :: (NiceParameterFull param, NiceStorage st) => NettestImpl m -> Text -> st -> ContractCode param st -> m Address

-- | Alias for <a>niTransfer</a>.
transferAction :: NettestImpl m -> TransferData -> m ()

-- | Call a certain entrypoint of a contract referred to by some address.
--   The sender is <a>nettestAddr</a>, so it should have sufficient XTZ to
--   pay tx fee.
callAction :: (Show v, NiceParameter v) => NettestImpl m -> AddrOrAlias -> EpName -> v -> m ()

-- | Call a certain entrypoint of a contract referred to by the second
--   address from the first address.
callFromAction :: (Show v, NiceParameter v) => NettestImpl m -> AddrOrAlias -> AddrOrAlias -> EpName -> v -> m ()

-- | Alias for <a>niComment</a>.
commentAction :: NettestImpl m -> Text -> m ()

-- | Alias for <a>niExpectFailure</a>.
expectFailureAction :: NettestImpl m -> m a -> NettestFailure -> m ()

-- | A short partial constructor for <a>EpName</a>. It is supposed to be
--   applied to string constants, so programmer is responsible for
--   validity. And this code is for tests anyway, so each failure is a
--   programmer mistake.
--   
--   It is intentionally here and not in some deeper module because the
--   name is really short and more suitable for writing scenarios.
ep :: HasCallStack => Text -> EpName

-- | Failures that could be expected in the execution of a
--   <a>NettestScenario</a> action
data NettestFailure
NettestFailedWith :: NettestFailure
NettestMutezArithError :: ArithErrorType -> NettestFailure
NettestShiftArithError :: NettestFailure
NettestGasExhaustion :: NettestFailure

-- | Configuration of nettest implementation for real network.
data NettestClientConfig
NettestClientConfig :: Maybe Text -> Maybe Text -> Maybe Word16 -> FilePath -> Bool -> Bool -> NettestClientConfig
[nccScenarioName] :: NettestClientConfig -> Maybe Text
[nccNodeAddress] :: NettestClientConfig -> Maybe Text
[nccNodePort] :: NettestClientConfig -> Maybe Word16
[nccTezosClient] :: NettestClientConfig -> FilePath
[nccNodeUseHttps] :: NettestClientConfig -> Bool
[nccVerbose] :: NettestClientConfig -> Bool

-- | Run <a>NettestScenario</a> using implementation for real network.
--   Throws an error if an unexpected failure occurs or if an expected one
--   doesn't
runNettestClient :: NettestClientConfig -> NettestScenario -> IO ()

-- | Implementation that works with real network and uses `tezos-node` RPC
--   and `tezos-client`.
nettestImplClient :: NettestClientConfig -> NettestImpl IO

-- | Constraint for a monad in which we can do nettest actions. It requires
--   <a>NettestImpl</a> capability.
type MonadNettest caps base m = (Monad base, m ~ CapsT caps base, HasCap NettestImpl caps)

-- | Monad transformer that adds only <a>NettestImpl</a> capability.
type NettestT m = CapsT '[NettestImpl] m

-- | <a>resolveAddrAction</a> adapted to <tt>caps</tt>.
resolveAddr :: MonadNettest caps base m => AddrOrAlias -> m Address

-- | <a>resolveAddrAction</a> adapted to <tt>caps</tt>.
resolveNettestAddr :: MonadNettest caps base m => m Address

-- | <a>newAddressAction</a> adapted to <tt>caps</tt>.
newAddress :: MonadNettest caps base m => Text -> m Address

-- | <a>originateAction</a> adapted to <tt>caps</tt>.
originate :: MonadNettest caps base m => OriginateData -> m Address

-- | <a>originateSimpleAction</a> adapted to <tt>caps</tt>.
originateSimple :: (MonadNettest caps base m, NiceParameterFull param, NiceStorage st) => Text -> st -> ContractCode param st -> m Address

-- | <a>transferAction</a> adapted to <tt>caps</tt>.
transfer :: MonadNettest caps base m => TransferData -> m ()

-- | <a>callAction</a> adapted to <tt>caps</tt>.
call :: (MonadNettest caps base m, NiceParameter v, Show v) => AddrOrAlias -> EpName -> v -> m ()

-- | <a>callFromAction</a> adapted to <tt>caps</tt>.
callFrom :: (MonadNettest caps base m, NiceParameter v, Show v) => AddrOrAlias -> AddrOrAlias -> EpName -> v -> m ()

-- | <a>commentAction</a> adapted to <tt>caps</tt>.
comment :: MonadNettest caps base m => Text -> m ()

-- | <a>expectFailureAction</a> adapted to <tt>caps</tt>.
expectFailure :: MonadNettest caps base m => m a -> NettestFailure -> m ()

-- | Adapt <tt>caps</tt>-based interface back to argument passing style.
uncapsNettest :: forall m a. Monad m => NettestT m a -> NettestImpl m -> m a

-- | Run a <a>NettestScenario</a> by converting it to integrational
--   scenario and then passing to HUnit engine. Throws an exception in case
--   of an unexpected failure.
--   
--   It is suitable for very simple test-suites where we just want to test
--   scenario quickly first and then run it on real network in case we
--   consider it valid.
runNettestViaIntegrational :: NettestScenario -> IO ()

-- | Build <a>IntegrationalScenario</a> out of <a>NettestScenario</a>. Also
--   accepts a <tt>NettestExpectation</tt> to validate the result of the
--   scenario
nettestToIntegrational :: NettestScenario -> IntegrationalScenario
getClientConfig :: Maybe Text -> IO NettestClientConfig

-- | Standard command line options parser for <a>NettestClientConfig</a>.
clientConfigParser :: Maybe Text -> Parser NettestClientConfig
